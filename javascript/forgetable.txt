[Cubes]:
addEventListener("keydown", (event) => {
	userMovement(event.key);
	console.log("Y: " + cube.style.top, "X: " + cube.style.left, "marginX: " + marginX, "marginY: " + marginY);

	// Repeating interval
	clearInterval(mainInterval);
});

function userMovement(value) {
	switch (value) {
		case "ArrowUp":
			cube.style.top = `${parseInt(cube.style.top) - marginY}px`;
			break;
		case "ArrowLeft":
			cube.style.left = `${parseInt(cube.style.left) - marginX}px`;
			break;
		case "ArrowRight":
			cube.style.left = `${parseInt(cube.style.left) + marginX}px`;
			break;
		case "ArrowDown":
			cube.style.top = `${parseInt(cube.style.top) + marginY}px`;
			break;
		default:
			return;
	}
}

// Center a cube initially
cube.style.left = `${(docWidth / 2) - (offset.width / 2)}px`;
cube.style.top = `${(docHeight / 2) - (offset.height / 2)}px`;

// To get the offset
let offset = cube.getBoundingClientRect();



// const elementInfo = enlistCube();


[Pattern]:
function generateDirections(oldDirection) {
	while(true) {
		let newDirection = {
			x: getRandomBool() ? "left" : "right",
			y: getRandomBool() ? "up" : "down"
		};

		// Returns true if the old ones contains both the new ones, false otherwise
		let result = Object.keys(oldDirection).every((key) => newDirection.hasOwnProperty(key) && oldDirection[key] != newDirection[key]);

		if (!result) {
			return newDirection;
		}
	}
}

// Decide the directions of the pattern
pattern.position[axis].margin = [ "left", "up" ].includes(pattern.position[axis].direction) ?
-pattern.position[axis].margin :
pattern.position[axis].margin;

// Why does this one not work??
let result = pattern.position.known.some(subArray => subArray.includes(...[newPosX, newPosY]));

// Function to adjust pattern positions
function adjustMovement(pattern, index) {
	const excludedKeys = [ "known" ];
	let iteration = 0, iteration2 = 0;
	let newPos = {
		x: 0,
		y: 0,
		excludedMargins: [],
	};
	/**
	 * if the new direction (margin) for both the x- and y-axis doesn't lead to previous position (value)
	 * if (!position.known.includes(oldPosX + marginX) && !position.known.includes(oldPosY + marginY))
	 * let result = pattern.position.known.some(subArray => subArray.includes([newPosX, newPosY]));
	 */

	// Calculate the new positions based on which move brings the pattern the clossest, with variance
	while (true) {
		let margin1 = 0, margin2 = 0, calc1 = 0, calc2 = 0, marginVarience = patternConstants.VARIANCE;
		let result, result2;
		for (const [axis] of Object.entries(pattern.position)) {
			if (!excludedKeys.includes(axis)) {
				if (newPos.excludedMargins.length == 0) {
					margin1 = [ 0, 2 ].includes(iteration) && (Math.random() > marginVarience) ? 
					patternConstants.MARGIN :
					-patternConstants.MARGIN;

					margin2 = [ 0, 1 ].includes(iteration) && (Math.random() > marginVarience) ?
					-patternConstants.MARGIN :
					patternConstants.MARGIN;
				} else {
					do {
						margin1 = [ 0, 2 ].includes(iteration2) ? 
						patternConstants.MARGIN :
						-patternConstants.MARGIN;
	
						margin2 = [ 0, 1 ].includes(iteration2) ?
						-patternConstants.MARGIN :
						patternConstants.MARGIN;

						result2 = newPos.excludedMargins.some(subArray => (subArray[0] == margin1) && (subArray[1] == margin2));
						iteration2++;
					} while (result2 && (iteration2 < patternConstants.MAX_ITERATIONS))
				}

				console.log(newPos.excludedMargins);
				calc1 = pattern.position[axis].current + margin1;
				calc2 = pattern.position[axis].current + margin2;

				newPos[axis] = (Math.abs(pattern.position[axis].target - calc1) < Math.abs(pattern.position[axis].target - calc2)) ? calc1 : calc2;

				newPos.excludedMargins.push([margin1, margin2]);
			}
		}

		// We check if our new positions are already known and loop if so
		// Maximum iteration limit to prevent infinite recursion
		result = pattern.position.known.some(subArray => (subArray[0] == newPos.x) && (subArray[1] == newPos.y));
		if (result) {
			if (iteration >= patternConstants.MAX_ITERATIONS) {
				console.log("Maximum iterations reached. Starting a new pattern.");
				// console.log("All possible movements made. Starting a new pattern.");
				patternArray.splice(index, 1, createPatternBud());
				break;
			}

			iteration++;
		} else {
			pattern.position.x.current = newPos.x;
			pattern.position.y.current = newPos.y;
			pattern.position.known.push([ newPos.x, newPos.y ]);
			break;
		}
	}
}

// To get the inverse of the mouse's coÃ¶rdinates: Math.abs(mouseX - (maxWidth / 2)):

// Using a function to call debounce doesn't seem to work?
const handleMouseMove = debounce((event) => {
	updateMenuVisibility(event);
}, 50);
// For testing, one movement at a time
document.addEventListener("keydown", (event) => {
	if (event.code.toLowerCase() == "space") {
		patternArray.forEach((pattern, index) => {
			pattern.requestedAnimation = window.requestAnimationFrame(() => {
				patternDraw(pattern, index);
			});
			pattern.frameCountAnimation++;
		});
	}
});

window.onresize = () => {
	location.reload();
};
